From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <ivan@mrivanplays.com>
Date: Thu, 13 Aug 2020 15:14:36 +0300
Subject: [PATCH] Per entity (type) collision settings

Base patch was the only player collisions patch, the original author of was tr7zw <tr7zw@live.de>
but pretty much the whole implementation changed.

This patch implements per entity (type) collision settings with 100% compatibility with bukkit api and
vanilla.

The whole code is based around 1 class, the EntityFilter class. Whole filtering logic is there.

Co-authored-by: tr7zw <tr7zw@live.de>

diff --git a/src/main/java/net/minecraft/world/entity/EntityLiving.java b/src/main/java/net/minecraft/world/entity/EntityLiving.java
index a2cc723cce852f34532d0cb8c9cd066f8fdb60ce..4ea424511c997287ffb7c3d3cef455077d9f4be1 100644
--- a/src/main/java/net/minecraft/world/entity/EntityLiving.java
+++ b/src/main/java/net/minecraft/world/entity/EntityLiving.java
@@ -3073,7 +3073,7 @@ public abstract class EntityLiving extends Entity {
         // Paper - end don't run getEntities if we're not going to use its result
         // Tuinity start - reduce memory allocation from collideNearby
         List<Entity> list = com.tuinity.tuinity.util.CachedLists.getTempGetEntitiesList();
-        this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.pushable(this, world.paperConfig.fixClimbingBypassingCrammingRule), list); // Paper - fix climbing bypassing cramming rule
+        this.world.getEntities(this, this.getBoundingBox(), org.yatopiamc.yatopia.server.EntityFilter.getFilter(this, world.paperConfig.fixClimbingBypassingCrammingRule), list); // Paper - fix climbing bypassing cramming rule // Yatopia
         try {
         // Tuinity end - reduce memory allocation from collideNearby
 
diff --git a/src/main/java/org/yatopiamc/yatopia/server/EntityFilter.java b/src/main/java/org/yatopiamc/yatopia/server/EntityFilter.java
new file mode 100644
index 0000000000000000000000000000000000000000..2382a9ee51bbf8b4d4eba2f7f90ba891c84241e4
--- /dev/null
+++ b/src/main/java/org/yatopiamc/yatopia/server/EntityFilter.java
@@ -0,0 +1,145 @@
+package org.yatopiamc.yatopia.server;
+
+import org.yatopiamc.yatopia.server.YatopiaConfig;
+import java.util.function.Predicate;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityTypes;
+import net.minecraft.world.entity.EnumCreatureType;
+import net.minecraft.world.entity.IEntitySelector;
+import net.minecraft.world.scores.ScoreboardTeamBase;
+
+public class EntityFilter {
+
+    public static Predicate<Entity> getFilter(Entity entity, boolean ignoreClimbing) {
+       
+        if (YatopiaConfig.allCollisionsEnabled) {
+            return IEntitySelector.pushable(entity, ignoreClimbing);
+        }
+
+        ScoreboardTeamBase entityTeam = entity.getScoreboardTeam();
+        ScoreboardTeamBase.EnumTeamPush entityTeamPush =
+                entityTeam == null ?
+                        ScoreboardTeamBase.EnumTeamPush.ALWAYS :
+                        entityTeam.getCollisionRule();
+
+        if (entityTeamPush == ScoreboardTeamBase.EnumTeamPush.NEVER || entity.world.isClientSide
+                || entity.isSpectator()) {
+            return tested -> false;
+        }
+
+        Predicate<Entity> ret = (tested) -> {
+            if (!tested.isCollidable(ignoreClimbing) || !tested.canCollideWith(entity) || !entity.canCollideWith(tested)) {
+                return false;
+            }
+            ScoreboardTeamBase testedTeam = tested.getScoreboardTeam();
+            ScoreboardTeamBase.EnumTeamPush testedPush =
+                    testedTeam == null ?
+                            ScoreboardTeamBase.EnumTeamPush.ALWAYS :
+                            testedTeam.getCollisionRule();
+
+            if (testedPush == ScoreboardTeamBase.EnumTeamPush.NEVER) {
+                return false;
+            }
+            if (testedTeam != null && entityTeam != null) {
+                // see IEntitySelector#a(Entity)
+                // copied from there, although for me this logic doesn't seem quite right
+                boolean ally = entityTeam.isAlly(testedTeam);
+
+                if ((entityTeamPush == ScoreboardTeamBase.EnumTeamPush.PUSH_OWN_TEAM ||
+                        testedPush == ScoreboardTeamBase.EnumTeamPush.PUSH_OWN_TEAM) && ally) {
+                    return false;
+                }
+                return (entityTeamPush != ScoreboardTeamBase.EnumTeamPush.PUSH_OTHER_TEAMS
+                        && testedPush != ScoreboardTeamBase.EnumTeamPush.PUSH_OTHER_TEAMS) || ally;
+            } else {
+                return testedPush == ScoreboardTeamBase.EnumTeamPush.ALWAYS &&
+                        entityTeamPush == ScoreboardTeamBase.EnumTeamPush.ALWAYS;
+            }
+        };
+
+        ret = ret.and((tested) -> {
+            if (tested.getEntityType() == EntityTypes.PLAYER && YatopiaConfig.playerCollisions) {
+                return true;
+            }
+            if (tested.getEntityType().getEnumCreatureType() == EnumCreatureType.CREATURE && YatopiaConfig.animalCollisions) {
+                return true;
+            }
+            if (tested.getEntityType().getEnumCreatureType() == EnumCreatureType.AMBIENT && YatopiaConfig.ambientCollisions) {
+                return true;
+            }
+            if (tested.getEntityType().getEnumCreatureType() == EnumCreatureType.MONSTER) {
+                if (YatopiaConfig.monsterCollisions) {
+                    if (YatopiaConfig.pillagerCollisions) {
+                        return true;
+                    } else {
+                        return tested.getEntityType() != EntityTypes.PILLAGER;
+                    }
+                } else {
+                    if (YatopiaConfig.pillagerCollisions) {
+                        return tested.getEntityType() == EntityTypes.PILLAGER;
+                    } else {
+                        return false;
+                    }
+                }
+            }
+            if (tested.getEntityType().getEnumCreatureType() == EnumCreatureType.MISC) {
+                if (YatopiaConfig.miscCollisions) {
+                    if (YatopiaConfig.villagerCollisions && YatopiaConfig.ironGolemCollisions && YatopiaConfig.itemCollisions) {
+                        return true;
+                    }
+                    if (!YatopiaConfig.villagerCollisions) {
+                        if (tested.getEntityType() == EntityTypes.VILLAGER) {
+                            return false;
+                        }
+                    }
+                    if (!YatopiaConfig.ironGolemCollisions) {
+                        if (tested.getEntityType() == EntityTypes.IRON_GOLEM) {
+                            return false;
+                        }
+                    }
+                    if (!YatopiaConfig.itemCollisions) {
+                        if (tested.getEntityType() == EntityTypes.ITEM) {
+                            return false;
+                        }
+                    }
+                    return true;
+                } else {
+                    if (YatopiaConfig.villagerCollisions && YatopiaConfig.ironGolemCollisions && YatopiaConfig.itemCollisions) {
+                        if (tested.getEntityType() == EntityTypes.VILLAGER) {
+                            return true;
+                        }
+                        if (tested.getEntityType() == EntityTypes.IRON_GOLEM) {
+                            return true;
+                        }
+                        if (tested.getEntityType() == EntityTypes.ITEM) {
+                            return true;
+                        }
+                    }
+                    if (YatopiaConfig.villagerCollisions && YatopiaConfig.ironGolemCollisions) {
+                        if (tested.getEntityType() == EntityTypes.VILLAGER) {
+                            return true;
+                        }
+                        if (tested.getEntityType() == EntityTypes.IRON_GOLEM) {
+                            return true;
+                        }
+                    }
+                    if (YatopiaConfig.villagerCollisions) {
+                        if (tested.getEntityType() == EntityTypes.VILLAGER) {
+                            return true;
+                        }
+                    }
+                    return false;
+                }
+            }
+            if (tested.getEntityType().getEnumCreatureType() == EnumCreatureType.WATER_CREATURE && YatopiaConfig.waterCreatureCollisions) {
+                return true;
+            }
+            if (tested.getEntityType().getEnumCreatureType() == EnumCreatureType.WATER_AMBIENT && YatopiaConfig.waterAmbientCollisions) {
+                return true;
+            }
+            return false;
+        });
+
+        return ret;
+    }
+}
diff --git a/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java b/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
index f5a43e607f9c13e07a0f5e7e139eed93f159185b..795889fecf14180cdec2f289dd38984f10dddae7 100644
--- a/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
+++ b/src/main/java/org/yatopiamc/yatopia/server/YatopiaConfig.java
@@ -189,4 +189,34 @@ public class YatopiaConfig {
     private static void brandName() {
         brandName = getString("brand-name", brandName);
     }
+
+    public static boolean playerCollisions = true;
+    public static boolean animalCollisions = true;
+    public static boolean ambientCollisions = true;
+    public static boolean monsterCollisions = true;
+    public static boolean villagerCollisions = true;
+    public static boolean pillagerCollisions = true;
+    public static boolean ironGolemCollisions = true;
+    public static boolean miscCollisions = true;
+    public static boolean itemCollisions = true;
+    public static boolean waterCreatureCollisions = true;
+    public static boolean waterAmbientCollisions = true;
+    public static boolean allCollisionsEnabled = false;
+    private static void specificCollisionSettings() {
+        playerCollisions = getBoolean("collisions.players", playerCollisions);
+        animalCollisions = getBoolean("collisions.animals", animalCollisions);
+        ambientCollisions = getBoolean("collisions.ambient", ambientCollisions);
+        monsterCollisions = getBoolean("collisions.monsters", monsterCollisions);
+        villagerCollisions = getBoolean("collisions.villagers", villagerCollisions);
+        pillagerCollisions = getBoolean("collisions.pillagers", pillagerCollisions);
+        ironGolemCollisions = getBoolean("collisions.iron-golems", ironGolemCollisions);
+        miscCollisions = getBoolean("collisions.misc", miscCollisions);
+        itemCollisions = getBoolean("collisions.items", itemCollisions);
+        waterCreatureCollisions = getBoolean("collisions.water-creature", waterCreatureCollisions);
+        waterAmbientCollisions = getBoolean("collisions.water-ambient", waterAmbientCollisions);
+        allCollisionsEnabled =
+                playerCollisions && animalCollisions && ambientCollisions && monsterCollisions && villagerCollisions
+                        && pillagerCollisions && ironGolemCollisions && miscCollisions && itemCollisions
+                        && waterCreatureCollisions && waterAmbientCollisions;
+    }
 }
